{
  "id": "01G3E8JF3EDXK3D97YKN5CS3PF",
  "displayName": "Ramon",
  "postedDate": "2022-05-19T13:37:03.0943227+00:00",
  "content": "Interesting benchmark.. but how would I use this in an actual code?\r\n\r\nvar id = GenerateCombSpan(Guid.NewGuid(), DateTime.UtcNow)\r\n\r\nIsn\u0027t your benchmark currently hiding allocations?\r\n\r\n",
  "authorComment": false,
  "replies": [
    {
      "id": "01G3KFDRGNKZ9DQ8YV6S2HBG5B",
      "displayName": "Jos van der Til",
      "postedDate": "2022-05-21T14:13:01.0817446+00:00",
      "content": "You are right in a sense. Obviously the \u0060Guid\u0060 and \u0060DateTime\u0060 struct have to be stored somewhere and memory has to be allocated for them.\r\nHowever, both \u0060Guid\u0060 and \u0060DateTime\u0060 are \u0060structs\u0060 and they will be allocated on the stack instead of the heap.\r\n\r\nThe allocations that are removed in the code in this post are the allocations that are done on the heap and for which the Garbage Collector has to perform work to clean that up afterwards.\r\n\r\nPerhaps I should have made that clearer in the original post.\r\n\r\nJust to demonstrate, I have included a benchmark and result below :)\r\n\r\nHope this clarifies things!\r\n\r\n|       Method |     Mean |   Error |  StdDev | Allocated |\r\n|------------- |---------:|--------:|--------:|----------:|\r\n| GenerateComb | 108.2 ns | 0.83 ns | 0.74 ns |         - |\r\n\r\n\r\n\u0060\u0060\u0060cs\r\nusing BenchmarkDotNet.Attributes;\r\nusing BenchmarkDotNet.Diagnosers;\r\nusing BenchmarkDotNet.Running;\r\nusing System.Runtime.InteropServices;\r\n\r\nBenchmarkRunner.Run\u003CBenchmarks\u003E();\r\n\r\n[MemoryDiagnoser]\r\n[ReturnValueValidator(failOnError: true)]\r\npublic class Benchmarks\r\n{\r\n    private static readonly long BaseDateTicks = new DateTime(1900, 1, 1).Ticks;\r\n\r\n    [Benchmark]\r\n    public Guid GenerateComb()\r\n    {\r\n        var guid = Guid.NewGuid();\r\n        var now = DateTime.UtcNow;\r\n\r\n        return GenerateCombSpan(guid, now);\r\n    }\r\n\r\n    private static Guid GenerateCombSpan(Guid guid, DateTime now)\r\n    {\r\n        Span\u003Cbyte\u003E guidArray = stackalloc byte[16];\r\n        guid.TryWriteBytes(guidArray);\r\n\r\n        // Get the days and milliseconds which will be used to build the byte string\r\n        int days = new TimeSpan(now.Ticks - BaseDateTicks).Days;\r\n        double msecs = now.TimeOfDay.TotalMilliseconds;\r\n\r\n        // Convert to a byte array\r\n        Span\u003Cbyte\u003E daysArray = stackalloc byte[4];\r\n        MemoryMarshal.Write(daysArray, ref days);\r\n\r\n        // Note that SQL Server is accurate to 1/300th of a millisecond so we divide by 3.333333\r\n        long msecsSql = (long)(msecs / 3.333333);\r\n\r\n        Span\u003Cbyte\u003E msecsArray = stackalloc byte[8];\r\n        MemoryMarshal.Write(msecsArray, ref msecsSql);\r\n\r\n        // Reverse the bytes to match SQL Servers ordering\r\n        // Copy the bytes into the guid\r\n        guidArray[15] = msecsArray[0];\r\n        guidArray[14] = msecsArray[1];\r\n        guidArray[13] = msecsArray[2];\r\n        guidArray[12] = msecsArray[3];\r\n        guidArray[11] = daysArray[0];\r\n        guidArray[10] = daysArray[1];\r\n\r\n        return new Guid(guidArray);\r\n    }\r\n}\r\n\u0060\u0060\u0060\r\n",
      "authorComment": false,
      "replies": []
    }
  ]
}